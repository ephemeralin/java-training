package ru.job4j.exchanger;

import java.util.Random;

/**
 * Created by ephemeralin on 31.07.17.
 */
public class ExchangerMachine {
    /**
     * The constant NOTE_NOMINAL.
     */
    public static final int NOTE_NOMINAL = 10;
    /**
     * The constant AVAILABLE_NOMINALS.
     */
    public static final int[] AVAILABLE_NOMINALS = {1, 5, 10};

    /**
     * Available nominals could be generated by Exchanger Machine.
     */
    private int[] availableNominals;
    /**
     * Max possible nominal.
     */
    private int maxNominal;
    /**
     * Exactly method of exchange =).
     */
    private ExchangeMethod exchangeMethod;

    /**
     * Instantiates a new Exchanger machine.
     *
     * @param availableNominals the available nominals
     */
    ExchangerMachine(int[] availableNominals) {
        this.availableNominals = availableNominals;
        this.maxNominal = 0;
        for (int i = 0; i < availableNominals.length; i++) {
            if (availableNominals[i] > this.maxNominal) {
                this.maxNominal = availableNominals[i];
            }
        }
    }

    /**
     * Sets exchange method.
     *
     * @param exchangeMethod the exchange method
     */
    public void setExchangeMethod(ExchangeMethod exchangeMethod) {
        this.exchangeMethod = exchangeMethod;
    }

    /**
     * Validates coin nominal.
     * @param coinNominal nominal of coin which have been validated.
     * @return is ok or not
     */
    private Boolean validateCoinNominal(int coinNominal) {
        Boolean isValide = false;
        for (int i = 0; i < availableNominals.length; i++) {
            if (coinNominal == availableNominals[i]) {
                isValide = true;
            }
        }
        return isValide;
    }

    /**
     * Gets coin.
     *
     * @return the coin
     */
    public Coin getCoin() {
        Random randomizer = new Random();
        while (true) {
            int randomNominal = randomizer.nextInt(maxNominal);
            if (validateCoinNominal(randomNominal)) {
                return new Coin(randomNominal);
            }
        }
    }

    /**
     * Gets coin.
     *
     * @param coinNominal the coin nominal
     * @return the coin
     * @throws Exception the exception
     */
    public Coin getCoin(int coinNominal) throws Exception {
        if (validateCoinNominal(coinNominal)) {
            return new Coin(coinNominal);
        } else {
            throw new Exception("Wrong coin nominal!");
        }
    }

    /**
     * Change note coin [ ].
     *
     * @param noteNominal the note nominal
     * @return the coin [ ]
     * @throws Exception the exception
     */
    public Coin[] changeNote(int noteNominal) throws Exception {
        return exchangeMethod.change(this, noteNominal);
    }

    /**
     * Gets coins as string.
     *
     * @param coins the coins
     * @return the coins as string
     */
    public String getCoinsAsString(Coin[] coins) {
        String result = "";
        for (Coin coin : coins) {
            result = (result == "") ? String.format("%s", coin.getName()) : String.format("%s, %s", result, coin.getName());  ;
        }
        return result;
    }

    /**
     * The type Method all 1.
     */
    public static class MethodAll1 implements ExchangeMethod {
        /**
         * * Change note to coins by method "all ten 1".
         * @param exchangerMachine the exchanger machine
         * @param noteNominal      the note nominal
         * @return coins
         * @throws Exception the exception
         */
        public Coin[] change(ExchangerMachine exchangerMachine, int noteNominal) throws Exception {
            int numberOfCoins = 10;
            Coin[] coins = new Coin[numberOfCoins];
            int changedAmount = 0;
            int i = 0;
            while (changedAmount < noteNominal) {
                coins[i] = exchangerMachine.getCoin(1);
                changedAmount += coins[i].getValue();
                i++;
            }
            return coins;
        }
    }

    /**
     * The type Method one 5 five 1.
     */
    public static class MethodOne5Five1 implements ExchangeMethod {
        /**
         * Change note to coins by method "one 5 and five 1".
         * @param exchangerMachine the exchanger machine
         * @param noteNominal      the note nominal
         * @return coins
         * @throws Exception the exception
         */
        public Coin[] change(ExchangerMachine exchangerMachine, int noteNominal) throws Exception {
            int numberOfCoins = 6;
            Coin[] coins = new Coin[numberOfCoins];

            coins[0] = exchangerMachine.getCoin(5);
            int changedAmount = 5;
            int i = 1;
            while (changedAmount < noteNominal) {
                coins[i] = exchangerMachine.getCoin(1);
                changedAmount += coins[i].getValue();
                i++;
            }
            return coins;
        }
    }

    /**
     * The type Method two 5.
     */
    public static class MethodTwo5 implements ExchangeMethod {
        /**
         * * Change note to coins by method "two 5".
         * @param exchangerMachine the exchanger machine
         * @param noteNominal      the note nominal
         * @return coins
         * @throws Exception the exception
         */
        public Coin[] change(ExchangerMachine exchangerMachine, int noteNominal) throws Exception {
            int numberOfCoins = 2;
            Coin[] coins = new Coin[numberOfCoins];
            int changedAmount = 0;
            int i = 0;
            while (changedAmount < noteNominal) {
                coins[i] = exchangerMachine.getCoin(5);
                changedAmount += coins[i].getValue();
                i++;
            }
            return coins;
        }
    }
}
